generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email    String @unique
  password String

  provider         String?
  providerId       String?
  verificationCode VerificationCode?
  isverifiedEmail  Boolean           @default(false)

  role Role @default(user)

  isverified Boolean @default(false)

  profileImage String?
  poster       String?
  bio          String?
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follower[] @relation("UserFollowers")
  following    Follower[] @relation("UserFollowing")

  Notification      Notification[]
  sentNotifications Notification[] @relation("NotificationSender")

  messages Message[] @relation("MessageSender")

  chats1 Chat[] @relation("User1Chats")
  chats2 Chat[] @relation("User2Chats")

  chatTo   ChatRequest[] @relation("ChatRequestTo")
  chatFrom ChatRequest[] @relation("ChatRequestFrom")

  messagePrivate MessagesPrivacy @default(All)

  backgroundChat       String?
  customBackgroundChat String?

  settings SettingsMessenger? @relation("UserSettings")

  isOnline     Boolean? @default(false)
  typingInChat String?  @db.ObjectId

  verified  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      Json?
  image        String[]
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String         @db.ObjectId
  comments     Comment[]
  likes        Like[]
  Notification Notification[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String    @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String    @db.ObjectId
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?   @db.ObjectId
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String   @db.ObjectId
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  sender    User?    @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String?  @db.ObjectId
  type      String
  message   String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  avatar    String?
  postImage String?
  isRead    Boolean  @default(false)
  isNew     Boolean  @default(true)
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model VerificationCode {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}

// message

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user1   User   @relation("User1Chats", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id String @db.ObjectId

  user2   User   @relation("User2Chats", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id String @db.ObjectId

  messages Message[]
  unreadBy String?   @db.ObjectId

  mutedBy String[] @default([]) @db.ObjectId

  lastActivityAt DateTime? @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([user1Id, user2Id])
}

model ChatRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  from   User   @relation("ChatRequestFrom", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String @db.ObjectId

  to   User   @relation("ChatRequestTo", fields: [toId], references: [id], onDelete: Cascade)
  toId String @db.ObjectId

  status ChatRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content  String?
  image    String?
  sender   User    @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String  @db.ObjectId
  isRead   Boolean @default(false)

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId

  replies   Message[] @relation("ReplyTo")
  replyTo   Message?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SettingsMessenger {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(name: "UserSettings", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId String @unique @db.ObjectId

  backgroundColor String @default("#7391d5")
  textColor       String @default("#ebebeb")
  fontSize        String @default("14")
  radiusSize      String @default("12")

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum Role {
  user
  admin
}

enum ChatRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessagesPrivacy {
  All
  Request
}
